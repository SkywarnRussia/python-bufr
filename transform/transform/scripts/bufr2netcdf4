#!/usr/bin/env python
#
# python-bufr-transform , BUFR variable translation 
# 
# Copyright (C) 2010  Kristian Rune Larsen
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


""" converts any BUFR file to NetCDF, variable name mapping based on database """

__revision__ = 0.1


import bufr.metadb as bufrmetadb 
from bufr.transform import bufr2netcdf4

import sys
import getopt

if __name__ == '__main__':

    def usage():
        """ print basic usage and exit """
        print """USAGE: 
        bufr2netcdf [-c database connection url] [-l] <instrument> <input bufr file> <output netcdf file >

        -c: Set database url
        -l: dry run, lists instruments
        
        """
        sys.exit(2)

    list_instr = False
    dburl = None

    try:
        optlist, args = getopt.getopt(sys.argv[1:], 'c:lh', [])
    except IndexError:
        usage()
   
    for opts in optlist:
        if opts[0] == '-c':
            dburl = opts[1]
            continue
        if opts[0] == '-l':
            list_instr = True
            continue
        if opts[0] == '-h':
            usage()
            continue
    
    if list_instr:
        # list instruments and exit
        conn = None
        if dburl is not None: 
            conn = bufrmetadb.BUFRDescDBConn(dburl)
        else:
            conn = bufrmetadb.BUFRDescDBConn()
        instr_names = conn.get_instrument_names()
        instr_descriptions = conn.get_instrument_descriptions()
        for name, descr in zip(instr_names, instr_descriptions):
            print "%s\t%s" % (name, descr)
        sys.exit(0)
    try: 
        instr = args[0]
        bfn = args[1]
        ncfn = args[2]
    except:
        usage()

    if dburl is not None:
        bufr2netcdf4.bufr2netcdf(instr, bfn, ncfn, dburl=dburl)
    else:
        bufr2netcdf4.bufr2netcdf(instr, bfn, ncfn)


